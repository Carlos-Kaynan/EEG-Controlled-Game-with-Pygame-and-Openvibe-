import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy.signal import butter, filtfilt

# === Parâmetros ===
arquivo_csv = 'record-[2024.10.11-14.38.57].csv'
fs = 250  # Frequência de amostragem em Hz
canais_para_analisar = ['5', '9']  # Mude aqui os canais desejados

# === Leitura dos dados ===
df = pd.read_csv(arquivo_csv)
df.columns = df.columns[:2].tolist() + [str(c) for c in range(1, 33)] + list(df.columns[34:])

# === Filtro passa-faixa ===
def filtro_passafaixa(sinal, fs, fmin=1, fmax=30, ordem=5):
    nyq = fs / 2
    b, a = butter(ordem, [fmin/nyq, fmax/nyq], btype='band')
    return filtfilt(b, a, sinal)

# === Função para aplicar FFT e visualizar ===
def aplicar_fft_filtrada(sinal, fs, canal_nome):
    # Filtragem
    sinal_filtrado = filtro_passafaixa(sinal, fs)

    # FFT
    N = len(sinal_filtrado)
    freq = np.fft.rfftfreq(N, d=1/fs)
    espectro = np.abs(np.fft.rfft(sinal_filtrado))**2

    # Visualização com log
    plt.figure(figsize=(10, 5))
    plt.semilogy(freq, espectro, label=f'Canal {canal_nome}')
    plt.title(f"Espectro (log) - Canal {canal_nome} (Filtrado 1–30Hz)")
    plt.xlabel("Frequência (Hz)")
    plt.ylabel("Potência (escala log)")
    plt.xlim(0, 30)
    plt.grid(True)

    # Marcar bandas cerebrais
    bandas = {
        "Delta (0.5–4 Hz)": (0.5, 4),
        "Teta (4–8 Hz)": (4, 8),
        "Alfa (8–13 Hz)": (8, 13),
        "Beta (13–30 Hz)": (13, 30)
    }

    for label, (low, high) in bandas.items():
        plt.axvspan(low, high, color='gray', alpha=0.15, label=label)

    handles, labels = plt.gca().get_legend_handles_labels()
    by_label = dict(zip(labels, handles))
    plt.legend(by_label.values(), by_label.keys(), loc='upper right')
    plt.tight_layout()
    plt.show()

    # Potência por banda
    for nome_banda, (fmin, fmax) in bandas.items():
        idx = (freq >= fmin) & (freq <= fmax)
        potencia = np.sum(espectro[idx])
        print(f"{nome_banda} - Canal {canal_nome}: {potencia:.2f}")

# === Loop nos canais desejados ===
for canal in canais_para_analisar:
    sinal = df[canal].dropna().values
    aplicar_fft_filtrada(sinal, fs, canal)
